// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id() @default(uuid()) @map("uuid")
  username  String?   @unique
  email     String    @unique
  password  String
  role      String
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime  @updatedAt @map("updatedAt")
  profile   Profile?
  post      Post[]
  comment   Comment[]
}

model Profile {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
  avatar    String?
  firstName String? @map("firstName")
  lastName  String? @map("lastName")
}

model Post {
  id        String          @id() @default(uuid()) @map("uuid")
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String          @unique
  title     String
  content   String
  createdAt DateTime        @default(now()) @map("createdAt")
  updatedAt DateTime        @updatedAt @map("updatedAt")
  gallery   Gallery[]
  tag       PostTag[]
  category  PostCategory[]
  comment   Comment[]
}

model Category {
  id        String          @id() @default(uuid()) @map("uuid")
  name      String          @unique
  publicStatus     Boolean
  createdAt DateTime        @default(now()) @map("createdAt")
  updatedAt DateTime        @updatedAt @map("updatedAt")
  post      PostCategory[]
}

model Tag {
  id        String     @id() @default(uuid()) @map("uuid")
  name      String     @unique
  publicStatus    Boolean
  createdAt DateTime   @default(now()) @map("createdAt")
  updatedAt DateTime   @updatedAt @map("updatedAt")
  post      PostTag[]
}

model Gallery {
  id        String   @id() @default(uuid()) @map("uuid")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @unique
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @unique
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String @unique
}

model PostCategory {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String   @unique
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @unique
}

model Comment {
  id        String   @id() @default(uuid()) @map("uuid")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
}

model AboutAuthor {
  id           String    @id() @default(uuid()) @map("uuid")
  fullName     String
  aliasName    String
  introduction String
  interest    String[]
  reason       String[]
  target       String[]
  experience   String[]
  createdAt    DateTime  @default(now()) @map("createdAt")
  updatedAt    DateTime  @updatedAt @map("updatedAt")
  lifeProcess     LifeProcess?
}

model LifeProcess {
  author    AboutAuthor @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String       @unique
  title     String
  content   String
  createdAt DateTime     @default(now()) @map("createdAt")
  updatedAt DateTime     @updatedAt @map("updatedAt")
}
